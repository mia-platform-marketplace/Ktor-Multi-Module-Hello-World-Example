plugins {
    id('org.jetbrains.kotlin.jvm')
}

// If you want a dependency to be available to any module that imports this module, define it with `api` instead of
// `implementation`.
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1-native-mt'

    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.0'

    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-jackson:$retrofit_version"
    testImplementation "com.squareup.retrofit2:retrofit-mock:$retrofit_version"

    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"

    testImplementation group: 'com.squareup.okhttp', name: 'mockwebserver', version: '2.7.5'
    testImplementation "com.squareup.retrofit2:retrofit-mock:$retrofit_version"

    testImplementation libs.bundles.test.suite
    testImplementation 'org.mock-server:mockserver-netty:5.11.2'
}

// exclude junit4 transitive imports
configurations.implementation {
    exclude group: 'junit', module: 'junit'
}
configurations.testImplementation {
    exclude group: 'junit', module: 'junit'
}

test {
    useJUnitPlatform()
}

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        def propsFile = file "$generatedVersionDir/version.properties"
        propsFile.parentFile.mkdirs()
        def props = new Properties()
        print(rootProject.version.toString())
        props.setProperty("version", rootProject.version.toString())
        propsFile.withWriter { props.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
build.dependsOn generateVersionProperties

