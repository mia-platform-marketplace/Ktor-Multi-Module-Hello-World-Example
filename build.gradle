/**
 * As best practice, define here all plugins with their version and `apply false` and reuse them in submodules.
 * Also, each module shall import its dependencies separately.
 */

plugins {
    id('org.jetbrains.kotlin.jvm') version "$kotlin_version" apply false

    // Apply to all projects, used to check unused dependencies, run `./gradlew lintGradle` to check dependencies.
    // Be aware that automatic fixing with `fixLintGradle` might break something.
    id('nebula.lint') version "17.1.0"
}

// Do not delete, this will get updated automatically when running the version command
version '0.0.1'

// Do not add dependencies here! Bad practice
allprojects {
    group 'eu.miaplatform'
    gradleLint.rules = ['all-dependency']
    gradleLint.alwaysRun = false
}

subprojects {
    // setup junit5 and remove all api imports of junit 4
    configurations {
        implementation {
            exclude group: 'junit', module: 'junit'
        }
        testImplementation {
            exclude group: 'junit', module: 'junit'
        }

        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
            kotlinOptions.jvmTarget = "17"
        }
        tasks.withType(JavaCompile).configureEach {
            sourceCompatibility = "17"
            targetCompatibility = "17"
        }
    }
}

// RUN SCRIPT ./gradlew version -PnewVersion=[version]
task version {
    doLast {
        File gradleProperties = new File("gradle.properties")
        String gradlePropertiesText = gradleProperties.text
        String versionText = gradlePropertiesText.replaceFirst("version=$version", "version=$newVersion")
        gradleProperties.write(versionText)

        String tagName = "v${newVersion}"
        runCommands("git", "commit", "-a", "-m", tagName)
        runCommands("git", "tag", newVersion)
    }
}

private static String runCommands(String... commands) {
    Process process = new ProcessBuilder(commands).redirectErrorStream(true).start()
    process.waitFor()
    String result = ''
    process.inputStream.eachLine { result += it + '\n' }
    boolean error = process.exitValue() != 0
    if (error) {
        println(result)
    }
    return result
}